#!/usr/bin/env ruby

require 'cgi'
require 'stringio'
require 'tempfile'
require 'tmpdir'
require 'open3'
require 'zip'

def despace(x)
  x.is_a?(String) ? x.tr(' ', '') : x
end

def ensure_tempfile(events)
  case events
  when StringIO
    t =Tempfile.new('pippo')
    t.write(events.read)
    t.flush
    return t

  when Tempfile
    return events

  else
    raise "Boh.  I should never arrive here"
  end
end

def make_decay(decay, tau)
  case decay
  when "none", "step"
    return decay

  when "lin"
    return "linear:#{despace(tau)}"

  when "exp"
    return "exp:#{despace(tau)}"

  else
    raise "I shouldn't be here"
  end

end

def create_zip_archive(dir, basename_template)
  pos = basename_template.index('%d')
  return nil if pos.nil?

  root = basename_template[0...pos];
  pattern =  root + "*" + basename_template[pos+2..-1];
  
  pos = pattern.index('%d')
  return nil unless pos.nil?

  
  zipfile_name = File.join(dir, "#{root}.zip");
  $stderr.puts(zipfile_name);
  
  input_filenames = Dir.glob(File.join(dir, pattern));
  return nil if input_filenames.empty?


  Zip::File.open(zipfile_name, Zip::File::CREATE) do |zipfile|
    input_filenames.each do |path|
      # Two arguments:
      # - The name of the file as it will appear in the archive
      # - The original file, including the path to find it
      zipfile.add(File.basename(path), path)
    end
  end

  return zipfile_name
end

def create_success_page(cgi, dir, basename_template)
  zip_path=create_zip_archive(dir, basename_template)

  $stderr.puts(cgi.inspect)
  
  cgi.out("type" => "application/zip",
         # "disposition" => "attachment; filename=#{File.basename(zip_path)}"
         ) {
    File.read(zip_path)
  }
end

def create_error_page(cgi, status, stderr)
  cgi.out do
    cgi.html do
      cgi.body do
        cgi.p do
          CGI::escapeHTML(
            "Command terminated with error: " + stderr
          )
        end
      end
    end
  end
end

cgi=CGI.new("html4")

Dir.mktmpdir do |dir|
  frame_rate = despace(cgi.params['fps'][0])

  decay    = make_decay(cgi.params['decay'][0], cgi.params['tau'][0])

  basename_template = File.basename(cgi.params['template'][0])
  template = File.join(dir, basename_template)

  event_file = ensure_tempfile(cgi.params['myfile'][0])

  params = []
  params << "--sampling=#{frame_rate}"
  params << "--decay=#{decay}"
  params << "--output=#{template}"
  params << "--input=#{event_file.path}"

  $stderr.puts(params.inspect)

  stdout, stderr, status=Open3.capture3("/tmp/www/html/accumulator.exe", *params)

  if status.success?
    create_success_page(cgi, dir, basename_template)

  else
    create_error_page(cgi, status, stderr)

  end

end

# $stderr.puts (cgi.params.inspect)
# 
# cgi.print("Panini fritti!!!")
# cgi.print (cgi.params.inspect)
# 
# cgi.print(cgi.params['myfile'].first.read)
#   
# cgi.print(cgi.files.inspect)

# class CGIbis < CGI
#   include CGI::QueryExtension
# end
# 
# 
